<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux二进制文件安装mysql]]></title>
    <url>%2F2018%2F12%2F12%2Finstall-mysql-binary-on-centos%2F</url>
    <content type="text"><![CDATA[本文环境Centos6.8 64位，安装版本Mysql5.7.24 下载软件官网下载官网下载地址：https://dev.mysql.com/downloads/mysql/选择如下文件下载： wget下载：123# root用户执行cd ~wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz 创建mysql用户12groupadd mysqluseradd -r -g mysql mysql 安装解压缩123# 解压到/opt目录下，重命名文件夹tar -zvxf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz -C /optmv /opt/mysql-5.7.24-linux-glibc2.12-x86_64 /opt/mysql-5.7.24 查看系统是否已安装mysql1rpm -qa | grep -i mysql 如图本系统并未安装mysql 配置数据库目录12345mkdir -p /opt/mysql-5.7.24/&#123;data,log,etc,run,tmp&#125;touch /opt/mysql-5.7.24/etc/my.cnftouch /opt/mysql-5.7.24/log/&#123;mysql_error.log,mysql_bin.log,mysql_slow_query.log&#125;touch /opt/mysql-5.7.24/run/mysql.socktouch /opt/mysql-5.7.24/run/mysql.pid 目录说明： 数据目录 /opt/mysql-5.7.24/data}| 配置文件 /opt/mysql-5.7.24/etc/my.cnf| 错误日志 /opt/mysql-5.7.24/log/mysql_error.log| 二进制日志 /opt/mysql-5.7.24/log/mysql_bin.log| 慢查询日志 /opt/mysql-5.7.24/log/mysql_slow_query.log| 套接字socket文件 /opt/mysql-5.7.24/run/mysql.sock| pid文件 /opt/mysql-5.7.24/run/mysql.sock| 修改文件夹拥有者为mysql1chown -R mysql:mysql /opt/mysql-5.7.24 设置环境变量12345678vim /etc/profile# 在文件末尾追加如下内容# MYSQL_HOMEexport MYSQL_HOME=/opt/mysql-5.7.24export PATH=$PATH:$MYSQL_HOME/binsource /etc/profile 编辑my.cnf配置文件部分参数填写的路径要与前面设置的mysql路径一致，配置文件如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# vim /opt/mysql-5.7.24/etc/my/cnf# 内容同步至/etc/my.cnf[client]port = 3306socket = /opt/mysql-5.7.24/run/mysql.sockdefault-character-set = utf8mb4[mysqld_safe]socket = /opt/mysql-5.7.24/run/mysql.socknice = 0[mysqld]## * Base Setting#pid_file = /opt/mysql-5.7.24/run/mysql.pidsocket = /opt/mysql-5.7.24/run/mysql.sockport = 3306user = mysqlbasedir = /opt/mysql-5.7.24datadir = /opt/mysql-5.7.24/datatmpdir = /opt/mysql-5.7.24/tmplc-messages-dir = /usr/share/mysqlskip-external-locking## Instead of skip-networking the default is now to listen only on# localhost which is more compatible and is not less secure.# bind-address = 127.0.0.1## * Fine Tuning#key_buffer_size = 16Mmax_allowed_packet = 16Mthread_stack = 192Kthread_cache_size = 8# This replaces the startup script and checks MyISAM tables if needed# the first time they are touchedmyisam-recover-options = BACKUP#max_connections = 100#table_cache = 64#thread_concurrency = 10## * Query Cache Configuration#query_cache_limit = 1Mquery_cache_size = 16M## * Logging and Replication## Both location gets rotated by the cronjob.# Be aware that this log type is a performance killer.# As of 5.1 you can enable the log at runtime!#general_log_file = /var/log/mysql/mysql.log#general_log = 1## Error log - should be very few entries.#log_error = /opt/mysql-5.7.24/log/mysql_error.log## Here you can see queries with especially long durationslow_query_log = onslow-query-log-file = /opt/mysql-5.7.24/mysql_slow_query.log#long_query_time = 2#log-queries-not-using-indexes## The following can be used as easy to replay backup logs or for replication.# note: if you are setting up a replication slave, see README.Debian about# other settings you may need to change.#server-id = 1#log_bin = /opt/mysql-5.7.24/log/mysql_bin.logexpire_logs_days = 10max_binlog_size = 100M#binlog_do_db = include_database_name#binlog_ignore_db = include_database_name## * InnoDB## InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.# Read the manual for more InnoDB related options. There are many!## * Security Features## Read the manual, too, if you want chroot!# chroot = /var/lib/mysql/## For generating SSL certificates I recommend the OpenSSL GUI &quot;tinyca&quot;.## ssl-ca=/etc/mysql/cacert.pem# ssl-cert=/etc/mysql/server-cert.pem# ssl-key=/etc/mysql/server-key.pemsymbolic-links=0 初始化1mysqld --initialize --user=mysql --basedir=/opt/mysql-5.7.24 --datadir=/opt/mysql-5.7.24/data 系统会生成一个临时密码记得保存； 如果出现错误，查看/opt/mysql-5.7.24/log/mysql_error.log日志。 安装结果如图： mysql配置系统服务修改mysqld文件123456789# 拷贝mysql.server到/etc/init.d/mysqld文件cp /opt/mysql-5.7.24/support-files/mysql.server /etc/init.d/mysqld#设置mysqld文件中的路径vim /etc/init.d/mysqld# 设置basedir和datadirbasedir=/opt/mysql-5.7.24datadir=/opt/mysql-5.7.24/data 加入服务1chkconfig --add mysqld 设置开机启动和查看设置状态12chkconfig mysqld onchkconfig mysqld --list 启动mysql服务12# 可选参数 start|stop|restartservice mysqld start 我在这里遇到了错误 Starting MySQL…The server quit without updating PID file [FAILED]sql-5.7.24/data/iZuf65pgqo8iyipci611e6Z.pid).原因是/opt/mysql-5.7.24/run/文件夹下的mysql.pid和mysql.sock没有执行权限1chmod -R 755 /opt/mysql-5.7.24/run/ 查看mysql服务状态1service mysqld status 登录mysql，修改root密码123456789mysql -u root -pEnter password: [输入临时密码]mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;新密码&apos;;mysql&gt; flush privileges;mysql&gt; exit;# 重新登录mysql -u root -pEnter password: [新密码] End]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git自动部署hexo博客到服务器]]></title>
    <url>%2F2018%2F12%2F09%2Fdeploy-hexo2server-by-git%2F</url>
    <content type="text"><![CDATA[环境搭建 本地(Windows) node.js hexo 远程服务器(Linux) git nginx 相关文章： Linux安装git Linux安装nginx git设置git命令添加软连接如果git没有安装在/usr/bin/git，需要为/git/bin目录下的命令添加软连接。否则，同步时会出现git-receive-pack:command not found错误。 12345678# 我的git安装在了/opt目录下ln -s /opt/git/bin/git-upload-pack /usr/bin/git-upload-packln -s /opt/git/bin/git-upload-archive /usr/bin/git-upload-archiveln -s /opt/git/bin/git-shell /usr/bin/git-shellln -s /opt/git/bin/git-receive-pack /usr/bin/git-receive-packln -s /opt/git/bin/gitk /usr/bin/gitkln -s /opt/git/bin/git-cvsserver /usr/bin/git-cvsserverln -s /opt/git/bin/git /usr/bin/git 初始化git仓库12345678910# 切换到git 用户su git# 创建仓库cd /home/gitmkdir hexo.git#初始化仓库cd hexo.gitgit init --bare 配置SSH将本地的公钥复制到/home/git/.ssh/authorized_keys文件中。 测试SSH登录1ssh -i [公钥路径] -p [端口号] git@服务器ip 创建SSH config文件如果服务器修改了SSH默认端口，可以在本地的.ssh目录下创建config文件，方便hexo deploy时访问指定端口。配置文件内容如下：12345Host 服务器ipHostName 服务器ipUser gitPort SSH端口号IdentityFile ~/.ssh/git_rsa 配置git Hooks创建post-receive文件12cd /home/git/hexo.git/hooksvim post-receive 编辑文件内容12345678#!/bin/bashGIT_REPO=/home/git/hexo.gitTMP_GIT_CLONE=/tmp/hexoPUBLIC_WWW=/var/www/htmlrm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; 确认文件权限post-receive文件中提到了三个目录： /home/git/hexo.git /tmp/hexo /var/www/html 需确保以上三个目录和目录中所有的文件拥有者为git。可以通过chown命令修改拥有者。12sudo chown git:git -R /var/wwwsudo chown git:git -R /home/git/hexo.git 配置本地hexo修改本地hexo目录下的_config.ym，修改deploy配置：12345678910# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: - type: git repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git branch: master - type: git repo: &lt;username&gt;@服务器ip:hexo.git branch: master 同步本地执行hexo d命令，博客成功同步到服务器的/var/www/html中，则搭建成功。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>git</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux源代码安装nodejs]]></title>
    <url>%2F2018%2F12%2F09%2Finstall-nodejs-on-centos%2F</url>
    <content type="text"><![CDATA[下载官网：http://nodejs.cn/download/1wget http://cdn.npm.taobao.org/dist/node/v10.14.1/node-v10.14.1.tar.gz 安装依赖工具1yum install python gcc make g++ wget 解压编译安装12345678#解压tar -zvxf node-v10.14.1.tar.gz# 编译&amp;安装cd node-v10.14.1/./configure --prefix=/opt/nodejsmake prefix=/opt/nodejsmake prefix=/opt/nodejs install 编译报错1234which: no python2.7 in (/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/git/bin:/root/bin)ERROR: Did not find a new enough assembler, install one or build with --openssl-no-asm. Please refer to BUILDING.md 安装python2.7123456789101112131415#下载cd /usr/local/srccurl https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tgz -o python-2.7.14.tgz# 解压tar -zxvf Python-2.7.14.tgzcd Python-2.7.14./configure# 编译&amp;安装makemake install#查看版本python --version 查看版本12node -vnpm -v]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux源代码安装nginx]]></title>
    <url>%2F2018%2F12%2F09%2Finstall-nginx-on-centos%2F</url>
    <content type="text"><![CDATA[本文安装环境 Centos6.8 64位，安装版本 nginx 1.14.2 一、下载源代码官网：http://nginx.org/en/download.html 1wget http://nginx.org/download/nginx-1.14.2.tar.gz 二、安装依赖工具yum安装1yum -y install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre 手动安装依赖，举例pcre库1234567cd /usr/local/srcwget https://ftp.pcre.org/pub/pcre/pcre-8.36.tar.gztar -zxvf pcre-8.36.tar.gzcd pcre-8.36./configuremakemake install 三、编译和安装12345678# 解压tar -zvxf nginx-1.14.2.tar.gz# 编译和安装cd nginx-1.14.2./configure --prefix=/opt/nginx make prefix=/opt/nginxmake prefix=/opt/nginx install 四、启动nginx1/opt/nginx/sbin/nginx 访问浏览器，输入IP，显示“Welcome to nginx!”。 五、添加nginx到系统服务1、编写nginx文件在/etc/init.d目录下编写nginx文件1vim /etc/init.d/nginx nginx文件内容如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#!/bin/bash# nginx Startup script for the Nginx HTTP Server# this script create it by caffreyxin at 2007.10.15.# it is v.0.0.1 version.# if you find any errors on this scripts, please contact caffreyxin.# and send mail to xinyflove at sina dot com.## chkconfig: - 85 15# description: Nginx is a high-performance web and proxy server.# It has a lot of features, but it's not for everyone.# processname: nginx# pidfile: /var/run/nginx.pid# config: /usr/local/nginx/conf/nginx.conf# nginx directorynginxd=/opt/nginx/sbin/nginxnginx_config=/opt/nginx/conf/nginx.confnginx_pid=/var/run/nginx.pidRETVAL=0prog="nginx"# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ $&#123;NETWORKING&#125; = "no" ] &amp;&amp; exit 0[ -x $nginxd ] || exit 0# Start nginx daemons functions.start() &#123; if [ -e $nginx_pid ];then echo "nginx already running...." exit 1 fi echo -n $"Starting $prog: " daemon $nginxd -c $&#123;nginx_config&#125; RETVAL=$? echo [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx return $RETVAL&#125;# Stop nginx daemons functions.stop() &#123; echo -n $"Stopping $prog: " killproc $nginxd RETVAL=$? echo [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid&#125;# reload nginx service functions.reload() &#123; echo -n $"Reloading $prog: " #kill -HUP `cat $&#123;nginx_pid&#125;` killproc $nginxd -HUP RETVAL=$? echo&#125;# See how we were called.case "$1" instart) start ;;stop) stop ;;reload) reload ;;restart) stop start ;;status) status $prog RETVAL=$? ;;*) echo $"Usage: $prog &#123;start|stop|restart|reload|status|help&#125;" exit 1esacexit $RETVAL 2、添加到系统服务1234567# 添加到系统服务chkconfig --add /etc/init.d/nginxchmod 755 /etc/init.d/nginxchkconfig --add nginx# 设置开机自启动/sbin/chkconfig --level 345 nginx on 3、启动、停止、无间断重启1234# 可选 start | stop | restart | reload | status | helpservice nginx startservice nginx stopservice nginx reload]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux源代码安装git]]></title>
    <url>%2F2018%2F12%2F09%2Finstall-git-on-centos%2F</url>
    <content type="text"><![CDATA[本文安装环境 Centos6.8 64位，安装版本 git-2.19.2 一、下载git源代码github：https://github.com/git/git/releases官网：http://git-scm.com/download 二、安装依赖工具git的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。Centos安装有yum，可以使用以下命令12yum install curl-devel expat-devel gettext-devel \ openssl-devel zlib-devel 三、创建git用户添加root权限12345678910111213# 新建用户useradd git# sudoers文件添加写入、执行权限chmod 740 /etc/sudoers# 修改sudoers文件vim /etc/sudoers# 在/etc/sudoers找到root ALL=(ALL) ALL，# 在下面添加一行：git ALL=(ALL) ALL# sudoers文件恢复只读权限chmod 440 /etc/sudoers 四、编译安装安装包上传到/opt目录，然后解压安装。 1234567# 解压tar -zvxf git-2.19.2.tar.gz# 编译安装cd git-2.19.2make prefix=/opt/git allsudo make prefix=/opt/git install 安装成功后会在/opt目录下出现/git文件夹。 五、git配置环境变量为了便于使用git命令，还需要将git添加到环境变量中。12345678910111213# 修改环境变量配置文件vim /etc/profile# 在文件末尾添加# GIT_HOMEexport GIT_HOME=/opt/git/binexport PATH=$PATH:$GIT_HOME# 输出环境变量export $PATH# 使配置文件修改生效source /etc/profile 六、git命令1、查看git版本，确认安装和环境变量配置成功。1git --version 2、初始化仓库1234567# 在/home/git下新建文件夹cd /home/gitmkdir Hellogitcd Hellogit/# 初始化仓库git init]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
